#!/usr/bin/env node

const canihaz = require('canihaz');
const path = require('path');
const fs = require('fs').promises;

const source = path.join(__dirname, '..', 'assets', 'diagrams');
const template = `
<!doctype html>
<html>
  <head>
    <link rel="stylesheet" href="https://unpkg.com/font-awesome/css/font-awesome.min.css">
    <style>
      html, * {
        font-family: 'monaco';
      }

      .node {
        text-align: center;
      }
      
      i.fa {
        display: block;
        margin: 5px;
      }

      .edgeLabel:not(:empty) {
        padding: 0px 8px;
      }
    </style>
  </head>
  <body>
    <div id="container" class="mermaid"></div>
    <script id="api" src="https://unpkg.com/mermaid/dist/mermaid.min.js" charset="utf-8"></script>
  </body>
</html>
`;

async function snapshot(page, file) {
  try {
    const chart = await fs.readFile(path.join(source, file), 'utf-8');
    const output = path.join(source, '..', `${ path.basename(file, '.mmd') }.png`);

    console.log(`Rendering ${ file }`);

    await page.setContent(template, { waitUntil: ['load', 'networkidle0', 'domcontentloaded'] });
    await page.evaluate(chart => {
      window.mermaid.mermaidAPI.initialize({ theme: 'forest' });
      window.mermaid.mermaidAPI.render('id1', chart, svg => {
        document.getElementById('container').innerHTML = svg;
      });
    }, chart);

    const clip = await page.$eval('#container svg', svg => {
      const box = svg.getBoundingClientRect();
      return { x: box.left, y: box.top, width: box.width, height: box.height };
    });

    await page.screenshot({ path: output, clip, omitBackground: true });
  } catch (error) {
    throw new Error(`Snapshot of diagram failed: ${ error.message }`);
  }
}

console.log('Requesting availability of puppeteer, it will be installed if unavailable.'); // eslint-disable-line

canihaz({
  key: 'cliDependencies'
}).puppeteer(async function puppetmaster(error, puppeteer) {
  if (error) throw error;

  try {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    const diagrams = await fs.readdir(source);

    await page.setViewport({ width: 1920, height: 1080 });

    for (const file of diagrams) {
      if (path.extname(file) === '.mmd') await snapshot(page, file);
    }

    await browser.close();

    console.log('Chart images generated.'); // eslint-disable-line
  } catch (error) {
    throw new Error(`Puppeteer failed: ${ error.message }`);
  }
});
